# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import services_pb2 as services__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ToDoServiceStub(object):
    """The ToDo service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateToDo = channel.unary_unary(
                '/todo.ToDoService/CreateToDo',
                request_serializer=services__pb2.CreateToDoRequest.SerializeToString,
                response_deserializer=services__pb2.CreateToDoResponse.FromString,
                _registered_method=True)
        self.GetToDo = channel.unary_unary(
                '/todo.ToDoService/GetToDo',
                request_serializer=services__pb2.GetToDoRequest.SerializeToString,
                response_deserializer=services__pb2.GetToDoResponse.FromString,
                _registered_method=True)
        self.UpdateToDo = channel.unary_unary(
                '/todo.ToDoService/UpdateToDo',
                request_serializer=services__pb2.UpdateToDoRequest.SerializeToString,
                response_deserializer=services__pb2.UpdateToDoResponse.FromString,
                _registered_method=True)
        self.DeleteToDo = channel.unary_unary(
                '/todo.ToDoService/DeleteToDo',
                request_serializer=services__pb2.DeleteToDoRequest.SerializeToString,
                response_deserializer=services__pb2.DeleteToDoResponse.FromString,
                _registered_method=True)


class ToDoServiceServicer(object):
    """The ToDo service definition.
    """

    def CreateToDo(self, request, context):
        """Create a new ToDo item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetToDo(self, request, context):
        """Get a ToDo item by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateToDo(self, request, context):
        """Update a ToDo item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteToDo(self, request, context):
        """Delete a ToDo item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToDoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateToDo': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateToDo,
                    request_deserializer=services__pb2.CreateToDoRequest.FromString,
                    response_serializer=services__pb2.CreateToDoResponse.SerializeToString,
            ),
            'GetToDo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToDo,
                    request_deserializer=services__pb2.GetToDoRequest.FromString,
                    response_serializer=services__pb2.GetToDoResponse.SerializeToString,
            ),
            'UpdateToDo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateToDo,
                    request_deserializer=services__pb2.UpdateToDoRequest.FromString,
                    response_serializer=services__pb2.UpdateToDoResponse.SerializeToString,
            ),
            'DeleteToDo': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteToDo,
                    request_deserializer=services__pb2.DeleteToDoRequest.FromString,
                    response_serializer=services__pb2.DeleteToDoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'todo.ToDoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('todo.ToDoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ToDoService(object):
    """The ToDo service definition.
    """

    @staticmethod
    def CreateToDo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/todo.ToDoService/CreateToDo',
            services__pb2.CreateToDoRequest.SerializeToString,
            services__pb2.CreateToDoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetToDo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/todo.ToDoService/GetToDo',
            services__pb2.GetToDoRequest.SerializeToString,
            services__pb2.GetToDoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateToDo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/todo.ToDoService/UpdateToDo',
            services__pb2.UpdateToDoRequest.SerializeToString,
            services__pb2.UpdateToDoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteToDo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/todo.ToDoService/DeleteToDo',
            services__pb2.DeleteToDoRequest.SerializeToString,
            services__pb2.DeleteToDoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
